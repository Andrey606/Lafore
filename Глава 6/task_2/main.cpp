/*
* Представьте пункт для взимания платежей за проезд по автостраде. Каж- дая проезжающая машина должна заплатить за проезд 50 центов,
* однако часть машин платит за проезд, а часть проезжает бесплатно. В кассе ведет- ся учет числа проехавших машин и суммарная выручка от платы за проезд.
* Создайте модель такой кассы с помощью класса tollBooth. Класс должен содержать два поля. Одно из них, типа unsigned int, 
* предназначено для учета количества проехавших автомобилей, а второе, имеющее тип double, будет содержать суммарную выручку от 
* оплаты проезда. Конструктор дол- жен инициализировать оба поля нулевыми значениями. Метод payingCar() инкрементирует число 
* машин и увеличивает на 0,50 суммарную выручку. Другой метод, nopayCar(), увеличивает на единицу число автомобилей, 
* но оставляет без изменения выручку. Метод display() выводит оба значения на экран. Там, где это возможно, сделайте методы константными.
* Создайте программу, которая продемонстрирует работу класса. Програм- ма должна предложить пользователю нажать одну клавишу для того, 
* что- бы сымитировать заплатившего автолюбителя, и другую клавишу, чтобы сымитировать недобросовестного водителя. Нажатие клавиши 
* Esc должно привести к выдаче текущих значений количества машин и выручки и за- вершению программы.
*/

#include <iostream>
#include <iomanip>

using namespace std;

class tollBooth
{
    private:
        unsigned int cars_counter; // количества проехавших автомобилей
        double cashbox; // суммарную выручку от оплаты проезда
    public:
        tollBooth(): cars_counter(0), cashbox(0.0)
        { }

        void payingCar(void)
        {
            cars_counter++;
            cashbox += 0.50;
        }

        void nopayCar(void)
        {
            cars_counter++;
        }

        void display(void) const
        {
            cout << "At this moment:" << endl;
            cout << "cars drove: " << cars_counter << endl;
            cout << "cashbox: " << cashbox << " cents" << endl;
        }
};

int main()
{
    char ch;
    tollBooth cars;
    

    do 
    {
        cout << "Passing car drove?(y/n)" << endl;
        ch = cin.get();

        if(ch == 'y')
            cars.payingCar();
        else if(ch == 'n')
            cars.nopayCar();

        cars.display();
    }
    while(ch != 27); // 27 = escape

    return 0;                                                  
}